import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
import random
from typing import Dict, List

# ===== –ù–ê–°–¢–†–û–ô–ö–ò ===== #
# –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï –ù–ê –°–í–û–ò!
# API_TOKEN = '7136878943:AAHAKaLe0X1ky4J0we7Y3iQeATmYoUOQ2Wo'  # –ü–æ–ª—É—á–∏—Ç—å —É @BotFather
# API_ID = 10622852             # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org
# API_HASH = 'b92d19a058e1df6b820c44821a140da2'    # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org
# ADMIN_ID = 585870031         # –í–∞—à ID –≤ Telegram (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot)

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
# ===================== #

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs('sessions', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–æ–π –æ—Ç–º–µ—Ç–∫–∏
EMOJI_LIST = ['üëÄ', 'ü§ñ', '‚ú®', 'üåü', 'üí´', '‚ö°', 'üî•', 'üí•', 'üïµÔ∏è', 'üîç', 'üîé']

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
users_data = {}      # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_spams = {}    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
user_clients = {}    # Telethon –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()
    waiting_for_message = State()
    waiting_for_delay = State()
    waiting_for_chats = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserData:
    def __init__(self):
        self.user_id = None
        self.username = None
        self.first_name = None
        self.last_name = None
        self.chats = []
        self.selected_chats = []
        self.message = None
        self.delay = 60  # –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.is_active = False
        self.phone = None
        self.telethon_session = None
        self.telethon_client = None

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===== #

async def get_user_chats(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telethon"""
    if user_id not in user_clients or not user_clients[user_id].is_connected():
        return []
    
    try:
        client = user_clients[user_id]
        chats = []
        
        result = await client(GetDialogsRequest(
            offset_date=None,
            offset_id=0,
            offset_peer=InputPeerEmpty(),
            limit=200,
            hash=0
        ))
        
        for chat in result.chats:
            if hasattr(chat, 'title') and (hasattr(chat, 'megagroup') and chat.megagroup):
                chats.append({
                    "id": chat.id,
                    "title": chat.title,
                    "type": "supergroup",
                    "access_hash": chat.access_hash
                })
        
        return chats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

async def send_message_as_user(user_id: int, chat_id: int, message_text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_clients or not user_clients[user_id].is_connected():
        return False
    
    try:
        client = user_clients[user_id]

        random_emoji = random.choice(EMOJI_LIST)
        mention_link = random_emoji

        try:
            participants = await client.get_participants(chat_id, limit=50)
            if participants:
                random_user = random.choice(participants)
                mention_link = f"[{random_emoji}](tg://user?id={random_user.id})"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")

        full_message = f"{message_text}\n\n{mention_link}"

    # –ù–ï –º–µ–Ω—è–µ–º chat_id
        try:
            chat = await client.get_entity(chat_id)
        except Exception:
            chat = chat_id  # fallback ‚Äî –ø—Ä–æ—Å—Ç–æ id, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à—ë–ª

        await client.send_message(chat, full_message, parse_mode='markdown')

        return True

    except Exception as e:
        import traceback
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}: {e}")
        logger.error(traceback.format_exc())
        return False


        
        # full_message = f"{message_text}\n\n{mention_link}"
        # await client.send_message(chat_id, full_message, parse_mode='markdown')
        # return True
    # except Exception as e:
    #     # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    #     random_emoji = random.choice(EMOJI_LIST)
    #     # full_message = f"{message_text}\n\n{random_emoji} {mention}"
    #     mention_link = f"[{random_emoji} {random_user.first_name or ''}](tg://user?id={random_user.id})"
    #     full_message = f"{message_text}\n\n{mention_link}"
    #     full_message = str(full_message)
        
    #     await client.send_message(chat_id, full_message, parse_mode='markdown')
    #     return True
    
    # except Exception as e:
    #     import traceback
    #     logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}: {e}")
    #     logger.error(traceback.format_exc())
    #     return False

def create_chats_keyboard(chats: List[Dict], selected_chats: List[int] = []) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —á–∞—Ç–æ–≤"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    for chat in chats:
        chat_id = chat['id']
        chat_title = chat['title']
        prefix = "‚úÖ " if chat_id in selected_chats else ""
        keyboard.add(InlineKeyboardButton(
            text=f"{prefix}{chat_title}",
            callback_data=f"chat_{chat_id}"
        ))
    keyboard.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_spam"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    return keyboard

def create_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìù –ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="my_spams"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    keyboard.add(
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
        InlineKeyboardButton("üì¢ –û –±–æ—Ç–µ", callback_data="about")
    )
    return keyboard

async def spam_task(user_id: int):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if user_id not in users_data:
        return
    
    user_data = users_data[user_id]
    
    while user_data.is_active:
        try:
            for chat_id in user_data.selected_chats:
                if not user_data.is_active:
                    break
                
                
                try:
                    success = await send_message_as_user(user_id, chat_id, user_data.message)
                    if not success:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            if user_data.is_active:
                await asyncio.sleep(user_data.delay)  # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await asyncio.sleep(10)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===== #

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if user_id not in users_data:
        users_data[user_id] = UserData()
        users_data[user_id].user_id = user_id
        users_data[user_id].username = message.from_user.username
        users_data[user_id].first_name = message.from_user.first_name
        users_data[user_id].last_name = message.from_user.last_name
        users_data[user_id].telethon_session = f"sessions/{user_id}.session"
        
        await Form.waiting_for_phone.set()
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-—Ä–∞—Å—Å—ã–ª—å—â–∏–∫–∞!\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        try:
            await bot.send_message(
                ADMIN_ID,
                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                f"ID: {user_id}\n"
                f"–ò–º—è: {message.from_user.full_name}"
            )
        except:
            pass
    else:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_main_menu()
        )

@dp.message_handler(state=Form.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = message.from_user.id
    phone = message.text
    
    if not phone.startswith('+'):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789:")
        return
    
    users_data[user_id].phone = phone
    
    try:
        client = TelegramClient(StringSession(), API_ID, API_HASH, device_model="BotSpammer")
        await client.connect()
        
        sent_code = await client.send_code_request(phone)
        await state.update_data(
            phone_code_hash=sent_code.phone_code_hash,
            session=client.session.save(),
            phone=phone
        )
        await Form.waiting_for_code.set()
        
        await message.answer(
            "üì≤ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1-2-3-4-5:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ {phone}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        await state.finish()

@dp.message_handler(state=Form.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    code = message.text.replace('-', '')
    
    if not code.isdigit() or len(code) != 5:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ 5 —Ü–∏—Ñ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1-2-3-4-5:")
        return
    
    data = await state.get_data()
    session_str = data.get('session')
    phone = data.get('phone')
    phone_code_hash = data.get('phone_code_hash')
    
    try:
        client = TelegramClient(StringSession(session_str), API_ID, API_HASH)
        await client.connect()
        
        try:
            await client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash)
        except Exception as e:
            if "two-steps" in str(e):
                await state.update_data(session=client.session.save())
                await Form.waiting_for_password.set()
                await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                return
            raise e
        
        session_path = f"sessions/{user_id}.session"
        with open(session_path, "w") as f:
            f.write(client.session.save())

        # try:
        #     await client.sign_in(
        #         phone=users_data[user_id].phone,
        #         code=code,
        #         phone_code_hash=phone_code_hash
        #     )
        # except Exception as e:
        #     if "two-steps" in str(e):
        #         await Form.waiting_for_password.set()
        #         await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        #         return
        #     else:
        #         raise e
        
        user_clients[user_id] = client
        users_data[user_id].telethon_client = client
        users_data[user_id].chats = await get_user_chats(user_id)
        
        await state.finish()
        await message.answer(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.",
            reply_markup=create_main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        await state.finish()

@dp.message_handler(state=Form.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    password = message.text
    data = await state.get_data()
    session_str = data.get('session')

    try:
        client = TelegramClient(StringSession(session_str), API_ID, API_HASH)
        await client.connect()

        await client.sign_in(password=password)

        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º!
        session_path = f"sessions/{user_id}.session"
        with open(session_path, "w") as f:
            f.write(client.session.save())

        user_clients[user_id] = client
        users_data[user_id].telethon_client = client
        users_data[user_id].chats = await get_user_chats(user_id)

        await state.finish()
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.",
                            reply_markup=create_main_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è {user_id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'my_spams')
async def process_my_spams(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏'"""
    user_id = callback_query.from_user.id
    if user_id not in users_data:
        await bot.answer_callback_query(callback_query.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    user_data = users_data[user_id]
    
    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if user_data.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    button = InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_spam") if user_data.is_active else InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_spam")
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(button)
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"üìä –í–∞—à–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:\n\n"
             f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {user_data.message or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
             f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {user_data.delay} —Å–µ–∫.\n"
             f"üìå –ß–∞—Ç—ã: {len(user_data.selected_chats)}\n"
             f"üîß –°—Ç–∞—Ç—É—Å: {status}",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'new_spam')
async def process_new_spam(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞'"""
    user_id = callback_query.from_user.id
    if user_id not in users_data:
        await bot.answer_callback_query(callback_query.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    users_data[user_id].selected_chats = []
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="enter_message"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_spams"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
             "1. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
             "2. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã\n"
             "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É\n"
             "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'enter_message')
async def process_enter_message(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ'"""
    await Form.waiting_for_message.set()
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=Form.waiting_for_message)
async def process_message_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    if user_id not in users_data:
        await state.finish()
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
    
    users_data[user_id].message = message.text
    await state.finish()
    
    await Form.waiting_for_chats.set()
    users_data[user_id].chats = await get_user_chats(user_id)
    
    if not users_data[user_id].chats:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    keyboard = create_chats_keyboard(users_data[user_id].chats)
    await message.answer(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('chat_'), state=Form.waiting_for_chats)
async def process_chat_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤"""
    user_id = callback_query.from_user.id
    if user_id not in users_data:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    chat_id = int(callback_query.data.split('_')[1])
    user_data = users_data[user_id]
    
    if chat_id in user_data.selected_chats:
        user_data.selected_chats.remove(chat_id)
    else:
        user_data.selected_chats.append(chat_id)
    
    keyboard = create_chats_keyboard(user_data.chats, user_data.selected_chats)
    await bot.edit_message_reply_markup(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'start_spam', state=Form.waiting_for_chats)
async def process_start_spam(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'"""
    user_id = callback_query.from_user.id
    if user_id not in users_data:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users_data[user_id]
    
    if not user_data.selected_chats:
        await bot.answer_callback_query(callback_query.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ç!")
        return
    
    if not user_data.message:
        await bot.answer_callback_query(callback_query.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ!")
        return
    
    await state.finish()
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("30 —Å–µ–∫", callback_data="delay_30"),
        InlineKeyboardButton("1 –º–∏–Ω", callback_data="delay_60"),
        InlineKeyboardButton("5 –º–∏–Ω", callback_data="delay_300")
    )
    keyboard.add(InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="custom_delay"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="‚è± –£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith('delay_') or c.data == 'custom_delay', state='*')
async def process_delay_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    user_id = callback_query.from_user.id
    if user_id not in users_data:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if callback_query.data == 'custom_delay':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚åõ –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω–∏–º—É–º 10):"
        )
        await bot.answer_callback_query(callback_query.id)
        return
    
    delay = int(callback_query.data.split('_')[1])
    users_data[user_id].delay = delay
    
    await start_spamming(user_id, callback_query.message.message_id, callback_query.message.chat.id)
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=Form.waiting_for_delay)
async def process_custom_delay(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
    user_id = message.from_user.id
    if user_id not in users_data:
        await state.finish()
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
    
    try:
        delay = int(message.text)
        if delay < 10:
            raise ValueError("–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥")
        
        users_data[user_id].delay = delay
        await state.finish()
        
        await start_spamming(user_id)
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay} —Å–µ–∫—É–Ω–¥")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ (–º–∏–Ω–∏–º—É–º 10):")

async def start_spamming(user_id: int, message_id: int = None, chat_id: int = None):
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É"""
    if user_id not in users_data:
        return
    
    user_data = users_data[user_id]
    user_data.is_active = True
    
    if user_id in active_spams:
        active_spams[user_id].cancel()
    
    task = asyncio.create_task(spam_task(user_id))
    active_spams[user_id] = task
    
    if message_id and chat_id:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_spam"))
        
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                 f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {user_data.message}\n"
                 f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {user_data.delay} —Å–µ–∫.\n"
                 f"üìå –ß–∞—Ç—ã: {len(user_data.selected_chats)}\n\n"
                 f"–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=keyboard
        )
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_spam"))
        
        await bot.send_message(
            chat_id=user_id,
            text=f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                 f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {user_data.message}\n"
                 f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: {user_data.delay} —Å–µ–∫.\n"
                 f"üìå –ß–∞—Ç—ã: {len(user_data.selected_chats)}\n\n"
                 f"–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=keyboard
        )

@dp.callback_query_handler(lambda c: c.data == 'stop_spam')
async def process_stop_spam(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback_query.from_user.id
    if user_id not in users_data:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users_data[user_id]
    user_data.is_active = False
    
    if user_id in active_spams:
        active_spams[user_id].cancel()
        del active_spams[user_id]
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_spam"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'back_to_menu')
async def process_back_to_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_menu()
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'help')
async def process_help(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-—Ä–∞—Å—Å—ã–ª—å—â–∏–∫—É:\n\n"
        "1. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start\n"
        "2. –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ä–∞—Å—Å—ã–ª–∫–∏' —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã\n"
        "5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É\n"
        "6. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'\n\n"
        "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n\n"
        "‚ö†Ô∏è –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π"
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=help_text,
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'about')
async def process_about(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
    about_text = (
        "ü§ñ –ë–æ—Ç-—Ä–∞—Å—Å—ã–ª—å—â–∏–∫\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∞—à–∏ —á–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n\n"
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
        "- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏\n"
        "- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏\n"
        "- –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Ç–æ–≤\n"
        "- –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        "- –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @mxpon\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0"
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=about_text,
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'settings')
async def process_settings(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler()
async def any_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:",
        reply_markup=create_main_menu()
    )

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===== #

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    except:
        pass

async def on_shutdown(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ Telethon
    for user_id, client in user_clients.items():
        try:
            if client.is_connected():
                await client.disconnect()
        except:
            pass
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    for user_id in users_data:
        users_data[user_id].is_active = False
    
    try:
        await bot.send_message(ADMIN_ID, "üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
    except:
        pass
    
    await dp.storage.close()
    await dp.storage.wait_closed()

    

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip install telethon aiogram
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown, skip_updates=True)


# import logging
# import asyncio
# import qrcode
# import os
# import random
# from aiogram.utils import semaphore
# from telethon import TelegramClient
# from telethon.sessions import MemorySession
# from telethon.errors import SessionPasswordNeededError, PhoneNumberInvalidError, FloodWaitError
# from aiogram import Bot, Dispatcher, types
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher import FSMContext
# from aiogram.dispatcher.filters.state import State, StatesGroup
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from aiogram.utils.exceptions import Unauthorized

# # Logging setup
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
# logger = logging.getLogger(__name__)

# EMOJIS = ["üôÇ", "üôÉ", "üòâ", "üòä", "üòá", "ü§ó", "üòé", "ü§©", "ü§î", "üò∫"]



# # print("API_ID:", os.getenv("API_ID"))
# # print("API_HASH:", os.getenv("API_HASH"))
# # print("API_TOKEN:", os.getenv("API_TOKEN"))
# # API_TOKEN = '7725000275:AAGfzf_M0sj8RqQEKKsg6sUUybxBpG0A_tA'
# # API_ID = '20121768'
# # API_HASH = '5d579eeab57590fd3e68c6e68ba1249c'
# API_ID = int(os.getenv("API_ID"))
# API_HASH = os.getenv("API_HASH")
# API_TOKEN = os.getenv("API_TOKEN")

# class UserState:
#     def __init__(self):
#         self.clients = {}
#         self.selected_chats = []
#         self.messages = []
#         self.delay = 60
#         self.repeats = 1
#         self.stop_flag = False
#         self.spam_tasks = []

# class TelegramSpammer:
#     def __init__(self):
#         self.clients = {}
#         self.user_states = {}

#     async def send_message_to_chat(self, client: TelegramClient, phone: str, chat, messages: list):
#         try:
#             if not client.is_connected():
#                 await client.connect()
#                 logger.warning(f"Client {phone} was disconnected, reconnected.")
#             participants = await client.get_participants(chat, limit=10)
#             mentions = [f"[{EMOJIS[i]}](tg://user?id={u.id})" for i, u in enumerate(participants) if u and u.id]
#             text = random.choice(messages) + "\n\n" + " ".join(mentions)
#             await client.send_message(chat, text, parse_mode='Markdown')
#             logger.info(f"Message sent to {chat.name} using client {phone}")
#         except Exception as e:
#             logger.error(f"Error sending to {chat.name} using client {phone}: {e}")

#     async def spam_for_account(self, client, phone, chats, user_id):
#         user_state = self.user_states[user_id]
#         for _ in range(user_state.repeats):
#             if user_state.stop_flag:
#                 break
#             for chat in chats:
#                 if user_state.stop_flag:
#                     break
#                 try:
#                     await asyncio.sleep(user_state.delay)
#                     sem = semaphore.Semaphore(5)
#                 except FloodWaitError as e:
#                     logger.warning(f"Flood wait for {e.seconds} seconds for client {phone}")
#                     wait_time = min(e.seconds, 86400) + 5
#                     await asyncio.sleep(wait_time)
#                 except Exception as e:
#                     logger.error(f"Error in {chat.name} for client {phone}: {e}")
#         logger.info(f"Spam cycle completed for client {phone}")

#     async def run_tasks(self, tasks, user_id):
#         try:
#             await asyncio.gather(*tasks, return_exceptions=True)
#         except Exception as e:
#             logger.error(f"Error running tasks for user {user_id}: {e}")
#         logger.info(f"All bot-initiated spam tasks completed for user {user_id}.")

#     async def start_spam_from_bot(self, clients_to_use, user_id):
#         if user_id not in self.user_states:
#             self.user_states[user_id] = UserState()
#         user_state = self.user_states[user_id]
#         if not user_state.messages:
#             logger.error(f"Cannot start spam for user {user_id}: no messages set.")
#             return False
#         if not user_state.selected_chats:
#             logger.error(f"Cannot start spam for user {user_id}: no chats selected.")
#             return False
#         user_state.stop_flag = False
#         tasks = []
#         for client_data in clients_to_use:
#             task = asyncio.create_task(self.spam_for_account(client_data['client'], client_data['phone'], user_state.selected_chats, user_id))
#             tasks.append(task)
#         if not tasks:
#             logger.error(f"No spamming tasks created for user {user_id}.")
#             return False
#         await self.run_tasks(tasks, user_id)
#         return True

#     async def connect_account_bot(self, client, phone, user_id, name=None):
#         try:
#             user = await client.get_me()
#             self.clients[phone] = client
#             if user_id not in self.user_states:
#                 self.user_states[user_id] = UserState()
#             self.user_states[user_id].clients[phone] = {'client': client, 'user': user}
#             logger.info(f"Bot connected new account for {phone}")
#         except Exception as e:
#             logger.error(f"Error connecting bot account {phone} for user {user_id}: {e}")

# # Bot setup
# storage = MemoryStorage()
# bot_sessions = {}
# templates = {}

# class Form(StatesGroup):
#     CONNECT = State()
#     PASSWORD = State()
#     SELECT_CHATS = State()
#     MESSAGES = State()
#     DELAY = State()
#     REPEATS = State()
#     SELECT_ACCOUNT = State()
#     RENAME = State()
#     TEMPLATE = State()

# def get_main_menu():
#     keyboard = InlineKeyboardMarkup(row_width=2)
#     keyboard.add(
#         InlineKeyboardButton("üì± –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="connect"),
#         InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", callback_data="manage_accounts"),
#         InlineKeyboardButton("üí¨ –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã", callback_data="chats"),
#         InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —á–∞—Ç—ã", callback_data="select_chats"),
#         InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="messages"),
#         InlineKeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="templates"),
#         InlineKeyboardButton("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", callback_data="delay"),
#         InlineKeyboardButton("üîÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—ã", callback_data="repeats"),
#         InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="select_account_for_spam"),
#         InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop"),
#         InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")
#     )
#     return keyboard

# def get_account_selection_menu(user_id):
#     keyboard = InlineKeyboardMarkup(row_width=1)
#     if user_id in bot_sessions and bot_sessions[user_id]:
#         for phone, data in bot_sessions[user_id].items():
#             name = data.get('name', phone)
#             mark = "‚úÖ" if phone in window.user_states.get(user_id, UserState()).clients else ""
#             keyboard.add(InlineKeyboardButton(f"{mark} –ê–∫–∫–∞—É–Ω—Ç: {name}", callback_data=f"toggle_spam_account_{phone}"))
#     keyboard.add(InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", callback_data="start_selected_accounts_spam"))
#     keyboard.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_from_account_selection"))
#     return keyboard

# def get_manage_menu(user_id):
#     keyboard = InlineKeyboardMarkup(row_width=1)
#     if user_id in bot_sessions:
#         for phone, data in bot_sessions[user_id].items():
#             name = data.get('name', phone)
#             keyboard.add(
#                 InlineKeyboardButton(f"{name}: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_{phone}"),
#                 InlineKeyboardButton(f"{name}: –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{phone}")
#             )
#     keyboard.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
#     return keyboard

# def get_template_menu(user_id):
#     keyboard = InlineKeyboardMarkup(row_width=1)
#     if user_id in templates and templates[user_id]:
#         for name in sorted(templates[user_id].keys()):
#             keyboard.add(InlineKeyboardButton(f"–®–∞–±–ª–æ–Ω: {name}", callback_data=f"use_template_{name}"))
#     keyboard.add(
#         InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data="new_template"),
#         InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")
#     )
#     return keyboard

# async def validate_bot_token(bot):
#     try:
#         await bot.get_me()
#         logger.info("Bot token validated successfully.")
#         return True
#     except Unauthorized as e:
#         logger.critical(f"Invalid bot token: {e}")
#         return False
#     except Exception as e:
#         logger.error(f"Error validating bot token: {e}")
#         return False

# window = TelegramSpammer()
# bot_polling_task = None

# async def start_bot_polling():
#     global bot_polling_task
#     bot = Bot(token=API_TOKEN)
#     dp = Dispatcher(bot, storage=MemoryStorage())

#     @dp.message_handler(commands=['start', 'help'])
#     async def start(message: types.Message):
#         text = (
#             "üëã *–†–∞—Å—Å—ã–ª–∫–∞ –≤ Telegram*\n"
#             "–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
#             "1. –î–æ–±–∞–≤—å –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ QR-–∫–æ–¥.\n"
#             "2. –í—ã–±–µ—Ä–∏ —á–∞—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
#             "3. –£–∫–∞–∂–∏ –ø–æ–≤—Ç–æ—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫—É!"
#         )
#         sent_msg = await message.answer(text, reply_markup=get_main_menu(), parse_mode="Markdown")
#         try:
#             await sent_msg.pin()
#         except Exception as e:
#             logger.error(f"Failed to pin message: {e}")

#     @dp.callback_query_handler(lambda c: c.data == "connect")
#     async def connect_button(callback_query: types.CallbackQuery):
#         await Form.CONNECT.set()
#         await callback_query.message.answer(
#             "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: +79991234567\n–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º QR-–∫–æ–¥.",
#             reply_markup=get_main_menu()
#         )
#         await callback_query.answer()

#     @dp.message_handler(state=Form.CONNECT)
#     async def process_connect(message: types.Message, state: FSMContext):
#         phone = message.text.strip()
#         user_id = message.from_user.id
#         if not phone.startswith('+') or len(phone) < 10:
#             await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: +79991234567.", reply_markup=get_main_menu())
#             logger.error(f"Invalid phone format: {phone}")
#             return
#         try:
#             client = TelegramClient(MemorySession(), API_ID, API_HASH)
#             await client.connect()
#             if await client.is_user_authorized():
#                 if user_id not in bot_sessions:
#                     bot_sessions[user_id] = {}
#                 bot_sessions[user_id][phone] = {'client': client, 'name': phone}
#                 await window.connect_account_bot(client, phone, user_id)
#                 await state.finish()
#                 await message.reply("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!", reply_markup=get_main_menu())
#                 logger.info(f"Account {phone} already authorized for user {user_id}")
#                 return
#             qr_login = await client.qr_login()
#             qr = qrcode.QRCode()
#             qr.add_data(qr_login.url)
#             qr.make(fit=True)
#             qr_img = qr.make_image(fill_color="black", back_color="white")
#             qr_path = f"qr_{phone}.png"
#             try:
#                 qr_img.save(qr_path)
#             except Exception as e:
#                 await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞: {e}", reply_markup=get_main_menu())
#                 logger.error(f"Failed to save QR code for {phone}: {e}")
#                 await state.finish()
#                 return
#             try:
#                 with open(qr_path, 'rb') as f:
#                     await message.reply_photo(f, caption=f"üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è {phone} –≤ Telegram.")
#                 await qr_login.wait(timeout=60)
#                 if user_id not in bot_sessions:
#                     bot_sessions[user_id] = {}
#                 bot_sessions[user_id][phone] = {'client': client, 'name': phone}
#                 await window.connect_account_bot(client, phone, user_id)
#                 await state.finish()
#                 await message.reply("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!", reply_markup=get_main_menu())
#                 logger.info(f"Account {phone} connected via QR for user {user_id}")
#             except SessionPasswordNeededError:
#                 await Form.PASSWORD.set()
#                 async with state.proxy() as data:
#                     data['client'] = client
#                     data['phone'] = phone
#                 await message.reply("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA:", reply_markup=get_main_menu())
#             except asyncio.TimeoutError:
#                 await message.reply("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.", reply_markup=get_main_menu())
#                 logger.error(f"QR login timeout for {phone} for user {user_id}")
#                 await state.finish()
#             except PhoneNumberInvalidError:
#                 await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=get_main_menu())
#                 logger.error(f"Invalid phone number: {phone} for user {user_id}")
#                 await state.finish()
#             finally:
#                 if os.path.exists(qr_path):
#                     os.remove(qr_path)
#         except Exception as e:
#             await message.reply(f"‚ùå –û—à–∏–±–∫–∞ QR-–∫–æ–¥–∞: {e}", reply_markup=get_main_menu())
#             logger.error(f"QR login error for {phone} for user {user_id}: {e}")
#             await state.finish()

#     @dp.message_handler(state=Form.PASSWORD)
#     async def process_password(message: types.Message, state: FSMContext):
#         user_id = message.from_user.id
#         async with state.proxy() as data:
#             client = data.get('client')
#             phone = data.get('phone')
#         if not client or not phone:
#             await message.reply("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu())
#             logger.error(f"Session not found for 2FA for user {user_id}")
#             await state.finish()
#             return
#         password = message.text.strip()
#         try:
#             await client.sign_in(password=password)
#             if user_id not in bot_sessions:
#                 bot_sessions[user_id] = {}
#             bot_sessions[user_id][phone] = {'client': client, 'name': phone}
#             await window.connect_account_bot(client, phone, user_id)
#             await state.finish()
#             await message.reply("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!", reply_markup=get_main_menu())
#             logger.info(f"Account {phone} connected with 2FA for user {user_id}")
#         except Exception as e:
#             await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}", reply_markup=get_main_menu())
#             logger.error(f"2FA login error for {phone} for user {user_id}: {e}")
#             await state.finish()

#     @dp.callback_query_handler(lambda c: c.data == "manage_accounts")
#     async def manage_accounts_button(callback_query: types.CallbackQuery):
#         user_id = callback_query.from_user.id
#         if user_id not in bot_sessions or not bot_sessions[user_id]:
#             await callback_query.message.answer("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", reply_markup=get_main_menu())
#         else:
#             await callback_query.message.answer("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:", reply_markup=get_manage_menu(user_id))
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data.startswith("rename_"))
#     async def rename_button(callback_query: types.CallbackQuery, state: FSMContext):
#         phone = callback_query.data.replace("rename_", "")
#         await Form.RENAME.set()
#         await callback_query.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è {phone}:", reply_markup=get_main_menu())
#         async with state.proxy() as data:
#             data['phone_to_rename'] = phone
#         await callback_query.answer()

#     @dp.message_handler(state=Form.RENAME)
#     async def process_rename(message: types.Message, state: FSMContext):
#         user_id = message.from_user.id
#         new_name = message.text.strip()
#         async with state.proxy() as data:
#             phone = data.get('phone_to_rename')
#         if phone and user_id in bot_sessions and phone in bot_sessions[user_id]:
#             bot_sessions[user_id][phone]['name'] = new_name
#             await message.reply(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è: {new_name}", reply_markup=get_main_menu())
#             logger.info(f"Account {phone} renamed to {new_name} for user {user_id}")
#         else:
#             await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=get_main_menu())
#             logger.error(f"Failed to rename account for user {user_id}, phone {phone}")
#         await state.finish()

#     @dp.callback_query_handler(lambda c: c.data.startswith("delete_"))
#     async def delete_button(callback_query: types.CallbackQuery):
#         phone = callback_query.data.replace("delete_", "")
#         user_id = callback_query.from_user.id
#         if user_id in bot_sessions and phone in bot_sessions[user_id]:
#             client_to_delete = bot_sessions[user_id][phone]['client']
#             try:
#                 await client_to_delete.disconnect()
#                 logger.info(f"Client {phone} disconnected.")
#             except Exception as e:
#                 logger.warning(f"Error disconnecting client {phone}: {e}")
#             del bot_sessions[user_id][phone]
#             if user_id in window.user_states and phone in window.user_states[user_id].clients:
#                 del window.user_states[user_id].clients[phone]
#             await callback_query.message.answer(f"üóë –ê–∫–∫–∞—É–Ω—Ç {phone} —É–¥–∞–ª–µ–Ω.", reply_markup=get_main_menu())
#             logger.info(f"Account {phone} deleted for user {user_id}")
#         else:
#             await callback_query.message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
#             logger.error(f"Attempted to delete non-existent account {phone} for user {user_id}")
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data == "chats")
#     async def show_chats_button(callback_query: types.CallbackQuery):
#         user_id = callback_query.from_user.id
#         if user_id in bot_sessions:
#             chat_names = []
#             for phone, data in bot_sessions[user_id].items():
#                 client = data['client']
#                 try:
#                     async for dialog in client.iter_dialogs():
#                         if dialog.is_group or dialog.is_channel:
#                             chat_names.append(dialog.name)
#                 except Exception as e:
#                     logger.error(f"Failed to load chats for account {phone}: {e}")
#             if chat_names:
#                 response = "üí¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:\n" + "\n".join(chat_names)
#             else:
#                 response = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç(—ã)."
#         else:
#             response = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç(—ã)."
#         await callback_query.message.answer(response, reply_markup=get_main_menu())
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data == "select_chats")
#     async def select_chats_button(callback_query: types.CallbackQuery, state: FSMContext):
#         user_id = callback_query.from_user.id
#         if user_id not in bot_sessions or not bot_sessions[user_id]:
#             await callback_query.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.", reply_markup=get_main_menu())
#             await callback_query.answer()
#             return
#         available_chats = []
#         for phone, data in bot_sessions[user_id].items():
#             client = data['client']
#             try:
#                 async for dialog in client.iter_dialogs():
#                     if dialog.is_group or dialog.is_channel:
#                         available_chats.append(dialog.name)
#             except Exception as e:
#                 logger.error(f"Failed to load chats for account {phone}: {e}")
#         if not available_chats:
#             await callback_query.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.", reply_markup=get_main_menu())
#             await callback_query.answer()
#             return
#         chat_map = {str(idx): chat_name for idx, chat_name in enumerate(available_chats)}
#         async with state.proxy() as data:
#             data['chat_map'] = chat_map
#             data['selected_chat_names'] = []
#         keyboard = InlineKeyboardMarkup(row_width=1)
#         for idx, chat_name in chat_map.items():
#             keyboard.add(InlineKeyboardButton(chat_name, callback_data=f"chat_select_{idx}"))
#         keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_chat"))
#         await Form.SELECT_CHATS.set()
#         await callback_query.message.answer("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã:", reply_markup=keyboard)
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data.startswith("chat_select_"), state=Form.SELECT_CHATS)
#     async def toggle_chat_selection(callback_query: types.CallbackQuery, state: FSMContext):
#         idx = callback_query.data.replace("chat_select_", "")
#         async with state.proxy() as data:
#             chat_map = data.get('chat_map', {})
#             selected_chat_names = data.get('selected_chat_names', [])
#             if idx in chat_map:
#                 chat_name = chat_map[idx]
#                 if chat_name in selected_chat_names:
#                     selected_chat_names.remove(chat_name)
#                     mark = ""
#                 else:
#                     selected_chat_names.append(chat_name)
#                     mark = "‚úÖ "
#                 data['selected_chat_names'] = selected_chat_names
#             else:
#                 logger.error(f"Invalid chat index: {idx}")
#                 await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#                 return
#         keyboard = InlineKeyboardMarkup(row_width=1)
#         for idx_map, chat_name in chat_map.items():
#             current_mark = "‚úÖ " if chat_name in selected_chat_names else ""
#             keyboard.add(InlineKeyboardButton(f"{current_mark}{chat_name}", callback_data=f"chat_select_{idx_map}"))
#         keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_chat"))
#         await callback_query.message.edit_reply_markup(reply_markup=keyboard)
#         await callback_query.answer(f"{mark}{chat_name}")

#     @dp.callback_query_handler(lambda c: c.data == "finish_chat", state=Form.SELECT_CHATS)
#     async def finalize_chat_selection(callback_query: types.CallbackQuery, state: FSMContext):
#         user_id = callback_query.from_user.id
#         async with state.proxy() as data:
#             final_selected_chat_names = data.get('selected_chat_names', [])
#         if final_selected_chat_names:
#             if user_id not in window.user_states:
#                 window.user_states[user_id] = UserState()
#             window.user_states[user_id].selected_chats = final_selected_chat_names
#             await callback_query.message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(final_selected_chat_names)} —á–∞—Ç–æ–≤.", reply_markup=get_main_menu())
#             logger.info(f"Bot selected {len(final_selected_chat_names)} chats for user {user_id}")
#         else:
#             if user_id in window.user_states:
#                 window.user_states[user_id].selected_chats = []
#             await callback_query.message.answer("‚ùå –ß–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.", reply_markup=get_main_menu())
#             logger.info(f"No chats selected by user {user_id}")
#         await state.finish()
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data == "messages")
#     async def messages_button(callback_query: types.CallbackQuery):
#         await Form.MESSAGES.set()
#         await callback_query.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:", reply_markup=get_main_menu())
#         await callback_query.answer()

#     @dp.message_handler(state=Form.MESSAGES)
#     async def process_messages(message: types.Message, state: FSMContext):
#         user_id = message.from_user.id
#         messages = [m.strip() for m in message.text.splitlines() if m.strip()]
#         if messages:
#             if user_id not in window.user_states:
#                 window.user_states[user_id] = UserState()
#             window.user_states[user_id].messages = messages
#             await message.reply(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=get_main_menu())
#             logger.info(f"Messages set for user {user_id}: {messages}")
#         else:
#             await message.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã.", reply_markup=get_main_menu())
#             logger.warning(f"No messages provided by user {user_id}")
#         await state.finish()

#     @dp.callback_query_handler(lambda c: c.data == "delay")
#     async def delay_button(callback_query: types.CallbackQuery):
#         await Form.DELAY.set()
#         user_id = callback_query.from_user.id
#         delay = window.user_states.get(user_id, UserState()).delay
#         await callback_query.message.answer(f"‚è≥ –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É (—Å–µ–∫—É–Ω–¥, —Ç–µ–∫—É—â–∞—è: {delay}):", reply_markup=get_main_menu())
#         await callback_query.answer()

#     @dp.message_handler(state=Form.DELAY)
#     async def process_delay(message: types.Message, state: FSMContext):
#         user_id = message.from_user.id
#         try:
#             delay = int(message.text.strip())
#             if 1 <= delay <= 600:
#                 if user_id not in window.user_states:
#                     window.user_states[user_id] = UserState()
#                 window.user_states[user_id].delay = delay
#                 await message.reply(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥.", reply_markup=get_main_menu())
#                 logger.info(f"Delay set to {delay} seconds for user {user_id}")
#             else:
#                 await message.reply("‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 600 —Å–µ–∫—É–Ω–¥.", reply_markup=get_main_menu())
#                 logger.warning(f"Invalid delay input: {delay} by user {user_id}")
#         except ValueError:
#             await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_main_menu())
#             logger.warning(f"Non-numeric delay input: {message.text} by user {user_id}")
#         await state.finish()

#     @dp.callback_query_handler(lambda c: c.data == "repeats")
#     async def repeats_button(callback_query: types.CallbackQuery):
#         await Form.REPEATS.set()
#         user_id = callback_query.from_user.id
#         repeats = window.user_states.get(user_id, UserState()).repeats
#         await callback_query.message.answer(f"üîÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ (—Ç–µ–∫—É—â–µ–µ: {repeats}):", reply_markup=get_main_menu())
#         await callback_query.answer()

#     @dp.message_handler(state=Form.REPEATS)
#     async def process_repeats(message: types.Message, state: FSMContext):
#         user_id = message.from_user.id
#         try:
#             repeats = int(message.text.strip())
#             if 1 <= repeats <= 100:
#                 if user_id not in window.user_states:
#                     window.user_states[user_id] = UserState()
#                 window.user_states[user_id].repeats = repeats
#                 await message.reply(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {repeats} –ø–æ–≤—Ç–æ—Ä–æ–≤.", reply_markup=get_main_menu())
#                 logger.info(f"Repeats set to {repeats} for user {user_id}")
#             else:
#                 await message.reply("‚ùå –ü–æ–≤—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.", reply_markup=get_main_menu())
#                 logger.warning(f"Invalid repeats input: {repeats} by user {user_id}")
#         except ValueError:
#             await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_main_menu())
#             logger.warning(f"Non-numeric repeats input: {message.text} by user {user_id}")
#         await state.finish()

#     @dp.callback_query_handler(lambda c: c.data == "select_account_for_spam")
#     async def select_account_for_spam_button(callback_query: types.CallbackQuery):
#         user_id = callback_query.from_user.id
#         if user_id not in bot_sessions or not bot_sessions[user_id]:
#             await callback_query.message.answer("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", reply_markup=get_main_menu())
#         else:
#             await Form.SELECT_ACCOUNT.set()
#             await callback_query.message.answer("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=get_account_selection_menu(user_id))
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data.startswith("toggle_spam_account_"), state=Form.SELECT_ACCOUNT)
#     async def toggle_spam_account(callback_query: types.CallbackQuery):
#         phone = callback_query.data.replace("toggle_spam_account_", "")
#         user_id = callback_query.from_user.id
#         if user_id not in window.user_states:
#             window.user_states[user_id] = UserState()
#         if phone in window.user_states[user_id].clients:
#             del window.user_states[user_id].clients[phone]
#             await callback_query.answer(f"–ê–∫–∫–∞—É–Ω—Ç {phone} —Å–Ω—è—Ç —Å —Ä–∞—Å—Å—ã–ª–∫–∏.")
#         else:
#             if user_id in bot_sessions and phone in bot_sessions[user_id]:
#                 window.user_states[user_id].clients[phone] = bot_sessions[user_id][phone]
#                 await callback_query.answer(f"–ê–∫–∫–∞—É–Ω—Ç {phone} –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
#             else:
#                 await callback_query.answer(f"–ê–∫–∫–∞—É–Ω—Ç {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#                 logger.warning(f"Attempted to select non-existent account {phone} for user {user_id}")
#         await callback_query.message.edit_reply_markup(reply_markup=get_account_selection_menu(user_id))

#     @dp.callback_query_handler(lambda c: c.data == "start_selected_accounts_spam", state=Form.SELECT_ACCOUNT)
#     async def start_selected_accounts_spam(callback_query: types.CallbackQuery, state: FSMContext):
#         user_id = callback_query.from_user.id
#         clients_to_use = [{'client': data['client'], 'phone': phone} for phone, data in window.user_states.get(user_id, UserState()).clients.items()]
#         if not clients_to_use:
#             await callback_query.message.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=get_main_menu())
#             logger.warning(f"User {user_id} attempted to start spam without accounts.")
#             await state.finish()
#             await callback_query.answer()
#             return

#         await callback_query.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

#         success = await window.start_spam_from_bot(clients_to_use, user_id)
#         if success:
#             await callback_query.message.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!", reply_markup=get_main_menu())
#             logger.info(f"Bot-initiated spam started for user {user_id}")
#         else:
#             await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.", reply_markup=get_main_menu())
#             logger.error(f"Failed to start spam for user {user_id}")
#         await state.finish()

#     @dp.callback_query_handler(lambda c: c.data == "stop")
#     async def stop_button(callback_query: types.CallbackQuery):
#         user_id = callback_query.from_user.id
#         if user_id in window.user_states:
#             window.user_states[user_id].stop_flag = True
#             for phone, data in window.user_states[user_id].clients.items():
#                 try:
#                     await data['client'].disconnect()
#                 except Exception as e:
#                     logger.error(f"Error disconnecting {phone}: {e}")
#             window.user_states[user_id].spam_tasks = []
#             await callback_query.message.answer("üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=get_main_menu())
#             logger.info(f"Spam stopped for user {user_id}")
#         else:
#             await callback_query.message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=get_main_menu())
#             logger.info(f"No active spam for user {user_id}")
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data == "status")
#     async def status_button(callback_query: types.CallbackQuery):
#         user_id = callback_query.from_user.id
#         user_state = window.user_states.get(user_id, UserState())
#         active_accounts_count = len(user_state.clients)
#         status_text = (f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(user_state.messages)}, "
#                     f"–ß–∞—Ç–æ–≤: {len(user_state.selected_chats)}, "
#                     f"–ó–∞–¥–µ—Ä–∂–∫–∞: {user_state.delay} —Å–µ–∫., "
#                     f"–ü–æ–≤—Ç–æ—Ä–æ–≤: {user_state.repeats}, "
#                     f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {active_accounts_count}")
#         await callback_query.message.answer(f"üìä –°—Ç–∞—Ç—É—Å:\n{status_text}", reply_markup=get_main_menu())
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data == "templates")
#     async def templates_button(callback_query: types.CallbackQuery):
#         user_id = callback_query.from_user.id
#         if user_id not in templates or not templates[user_id]:
#             await callback_query.message.answer("üìã –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤.", reply_markup=get_template_menu(user_id))
#         else:
#             template_list = "\n".join(f"{i+1}. {name}" for i, name in enumerate(sorted(templates[user_id].keys())))
#             await callback_query.message.answer(f"üìã –®–∞–±–ª–æ–Ω—ã:\n{template_list}", reply_markup=get_template_menu(user_id))
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data == "new_template")
#     async def new_template_button(callback_query: types.CallbackQuery):
#         await Form.TEMPLATE.set()
#         await callback_query.message.answer(
#             "üìã –í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω:\n–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞.\n–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏—è.",
#             reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data="back"))
#         )
#         await callback_query.answer()

#     @dp.message_handler(state=Form.TEMPLATE)
#     async def process_new_template(message: types.Message, state: FSMContext):
#         user_id = message.from_user.id
#         lines = [m.strip() for m in message.text.splitlines() if m.strip()]
#         if len(lines) < 2:
#             await message.reply("‚ùå –®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data="back")))
#             return
#         template_name = lines[0]
#         template_messages = lines[1:]
#         if user_id not in templates:
#             templates[user_id] = {}
#         if template_name in templates[user_id]:
#             await message.reply(f"‚ùå –®–∞–±–ª–æ–Ω '{template_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data="back")))
#             return
#         templates[user_id][template_name] = template_messages
#         await state.finish()
#         await message.reply(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=get_main_menu())
#         logger.info(f"Template '{template_name}' saved for user {user_id}")

#     @dp.callback_query_handler(lambda c: c.data.startswith("use_template_"))
#     async def use_template_button(callback_query: types.CallbackQuery):
#         template_name = callback_query.data.replace("use_template_", "")
#         user_id = callback_query.from_user.id
#         if user_id in templates and template_name in templates[user_id]:
#             messages = templates[user_id][template_name]
#             if user_id not in window.user_states:
#                 window.user_states[user_id] = UserState()
#             window.user_states[user_id].messages = messages
#             await callback_query.message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω '{template_name}'.", reply_markup=get_main_menu())
#             logger.info(f"Template '{template_name}' loaded for user {user_id}")
#         else:
#             await callback_query.message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
#             logger.error(f"Template {template_name} not found for user {user_id}")
#         await callback_query.answer()

#     @dp.callback_query_handler(lambda c: c.data == "back" or c.data == "back_from_account_selection", state="*")
#     async def back_button(callback_query: types.CallbackQuery, state: FSMContext):
#         await state.finish()
#         await callback_query.message.answer("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
#         await callback_query.answer()

#     try:
#         if not await validate_bot_token(bot):
#             logger.critical("Invalid bot token.")
#             return
#         logger.info("Starting Telegram bot polling...")
#         bot_polling_task = asyncio.create_task(dp.start_polling())
#         await bot_polling_task
#     except asyncio.CancelledError:
#         logger.info("Bot polling task cancelled.")
#     except Exception as e:
#         logger.critical(f"Error in bot polling: {e}")

# if __name__ == "__main__":
#     asyncio.run(start_bot_polling())
